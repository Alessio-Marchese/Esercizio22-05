@page "/edit/{id:guid}"
@using Shared.DTOS.ToDoLists.GetById
@inject HttpClient HttpClient
@inject ToDoListClient ToDoListClient
@inject NavigationManager NavManager

@if (response is null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div class="container mt-4">
        <h2 class="mb-3">Modifica ToDo List</h2>
        <EditForm Model="@response" OnValidSubmit="updateToDoList" class="form-horizontal">
            <div class="mb-3 row">
                <label for="ListTitle" class="col-sm-2 col-form-label">Title:</label>
                <div class="col-sm-10">
                    <InputText id="ListTitle" @bind-Value="response.ListTitle" class="form-control"></InputText>
                </div>
            </div>
            <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-secondary me-2" @onclick="goBack">
                    <i class="fas fa-arrow-left"></i> Annulla
                </button>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Salva
                </button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public Guid id { get; set; }

    private Response? response { get; set; }

    protected override async Task OnInitializedAsync()
    {
        response = await ToDoListClient.GetToDoListByIdAsync(HttpClient, id);
    }

    private async Task updateToDoList()
    {
        await ToDoListClient.UpdateToDoListAsync(HttpClient, id, response.ListTitle);
        NavManager.NavigateTo("/");
    }

    private void goBack()
    {
        NavManager.NavigateTo("/");
    }
}
