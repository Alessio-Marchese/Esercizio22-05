@page "/"
@using Shared.DTOS.ToDoLists.GetAll
@inject HttpClient HttpClient
@inject ToDoListClient ToDoListClient
@inject NavigationManager NavManager


<PageTitle>Home</PageTitle>

@if (response is null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div class="container mt-4">
        <h2 class="mb-3">ToDo Lists</h2>

        <div class="mb-4">
            <EditForm Model="newToDoListTitle" OnSubmit="addToDoList">
                <div class="mb-3">
                    <label for="title" class="form-label">Title</label>
                    <InputText type="text" id="title" class="form-control" @bind-Value="newToDoListTitle" required />
                </div>
                <button type="submit" class="btn btn-primary">Add ToDo List</button>
            </EditForm>
        </div>

        <table class="table table-bordered table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Title</th>
                    <th>Created-From</th>
                    <th>Creation-Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var toDoList in response)
                {
                    <tr>
                        <td @onclick="() => redirectToDetail(toDoList.Id)" style="cursor: pointer;">
                            @toDoList.Title
                        </td>
                        <td>@toDoList.CreatedBy</td>
                        <td>@toDoList.Created.ToString("dd/MM/yyyy")</td>
                        <td>
                            <div class="d-flex">
                                <a class="btn btn-warning btn-sm me-2" href="/edit/@toDoList.Id" title="Modifica">
                                    <i class="fas fa-edit"></i> Modifica
                                </a>
                                <button class="btn btn-danger btn-sm" @onclick="() => deleteToDoList(toDoList.Id)" title="Elimina">
                                    <i class="fas fa-trash-alt"></i> Elimina
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    List<Response>? response;
    private string newToDoListTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        response = await ToDoListClient.GetAllAsync(HttpClient);
    }

    public void redirectToDetail(Guid id)
    {
        NavManager.NavigateTo($"/detail/{id}");
    }

    public async void deleteToDoList(Guid id)
    {
        await ToDoListClient.DeleteToDoListAsync(HttpClient, id);
        NavManager.Refresh();
    }

    private async Task addToDoList()
    {
        if(!string.IsNullOrWhiteSpace(newToDoListTitle))
        {
            var request = new Shared.DTOS.ToDoLists.CreateToDoList.Request(newToDoListTitle);
            await ToDoListClient.AddToDoListAsync(HttpClient, request);
            response = await ToDoListClient.GetAllAsync(HttpClient);
        }
    }
}
