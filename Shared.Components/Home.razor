@using Microsoft.AspNetCore.Components.Forms
@using Shared.Components.DTOS.ToDoLists.CreateToDoList
@using Shared.Components.DTOS.ToDoLists.GetAll
@inject HttpClient HttpClient
@inject ToDoListClient ToDoListClient
@inject NavigationManager NavManager

<PageTitle>Home</PageTitle>

@if (response is null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div class="container mt-4 shadow-lg p-4 bg-white rounded">
        <div class="card shadow-lg mt-4 mb-4">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Add a new list</h4>
            </div>
            <div class="card-body">
                <EditForm Model="newToDoListTitle" OnSubmit="addToDoList">
                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <InputText type="text" id="title" class="form-control" @bind-Value="newToDoListTitle" required />
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-plus-circle"></i> Add ToDo List
                    </button>
                </EditForm>
            </div>
        </div>

        <div class="row">
            @foreach (var toDoList in response.ToDoLists)
            {
                <div class="col-12 col-sm-6 col-md-4 mb-4">
                    <div class="card shadow-lg h-100">
                        <div class="card-body d-flex flex-column">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                @if (editingToDoListId == toDoList.Id)
                                {
                                    <EditForm Model="editToDoListTitle" OnValidSubmit="SaveEdit">
                                        <div class="input-group">
                                            <InputText type="text" class="form-control" @bind-Value="editToDoListTitle" />
                                            <button type="submit" class="btn btn-success btn-sm me-2">Save</button>
                                            <button type="button" class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                                        </div>
                                    </EditForm>
                                }
                                else
                                {
                                    <h5 class="card-title mb-0">
                                        @toDoList.Title
                                        <i class="fas fa-edit text-primary ms-2" role="button" @onclick="() => EditToDoList(toDoList.Id, toDoList.Title)"></i>
                                    </h5>
                                }
                                @if (toDoList.IsDone)
                                {
                                    <i class="fas fa-check-circle text-success ms-2"></i>
                                }
                                else
                                {
                                    <i class="fas fa-times-circle text-danger ms-2"></i>
                                }
                            </div>
                            <p class="card-text mt-2 flex-grow-1">
                                <strong>Created By:</strong> @toDoList.CreatedBy<br />
                                <strong>Creation Date:</strong> @toDoList.Created.ToString("dd/MM/yyyy")
                            </p>
                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-primary" @onclick="() => redirectToDetail(toDoList.Id)">Details</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => deleteToDoList(toDoList.Id)" title="Elimina">
                                    <i class="fas fa-trash-alt"></i> Elimina
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    GetAllToDoListResponse? response;
    private string newToDoListTitle = string.Empty;
    private Guid? editingToDoListId = null;
    private string editToDoListTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        response = await ToDoListClient.GetAllAsync(HttpClient);
    }

    public void redirectToDetail(Guid id)
    {
        NavManager.NavigateTo($"/detail/{id}");
    }

    public async void deleteToDoList(Guid id)
    {
        await ToDoListClient.DeleteToDoListAsync(HttpClient, id);
        response = await ToDoListClient.GetAllAsync(HttpClient);
    }

    private async Task addToDoList()
    {
        var request = new CreateToDoListRequest(newToDoListTitle);
        await ToDoListClient.AddToDoListAsync(HttpClient, request);
        response = await ToDoListClient.GetAllAsync(HttpClient);
        newToDoListTitle = string.Empty;
    }

    private void EditToDoList(Guid id, string currentTitle)
    {
        editingToDoListId = id;
        editToDoListTitle = currentTitle;
    }

    private void CancelEdit()
    {
        editingToDoListId = null;
        editToDoListTitle = string.Empty;
    }

    private async Task SaveEdit()
    {
        await ToDoListClient.UpdateToDoListAsync(HttpClient, editingToDoListId ?? Guid.Empty, editToDoListTitle);
        editingToDoListId = null;
        editToDoListTitle = string.Empty;
        response = await ToDoListClient.GetAllAsync(HttpClient);
    }
}
